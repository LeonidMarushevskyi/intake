# frozen_string_literal: true

# This file was generated by the `rails generate rspec:install` command.
# Conventionally, all specs live under a `spec` directory, which RSpec
# adds to the `$LOAD_PATH`. The generated `.rspec` file contains
# `--require spec_helper` which will cause # this file to always be loaded,
# without a need to explicitly require it in any files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# The `.rspec` file also contains a few flags that are not defaults but that
# users commonly want.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
require 'webmock/rspec'

if ENV['GENERATE_TEST_REPORTS'] == 'yes'
  require 'simplecov/parallel'
  SimpleCov::Parallel.activate
  SimpleCov.merge_timeout 3600
  SimpleCov.command_name("Rspec:#{ENV['TEST_ENV_NUMBER']}")
  SimpleCov.coverage_dir("#{ENV['CI_REPORTS']}/coverage/ruby")
  SimpleCov.start 'rails' do
    add_filter 'ruby_gems/'
  end
end

RSpec.configure do |config|
  config.before :suite do
    if ENV['USE_XVFB'] == 'true'
      require 'headless'
      @headless_manager = Headless.new(reuse: false)
      @headless_manager.start
    end
  end

  config.before :each do
    # we try stub_system_codes because it is only loaded in feature tests
    try(:stub_system_codes)
  end

  config.after :suite do
    @headless_manager.destroy if @headless_manager && ENV['USE_XVFB'] == 'true'
  end

  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  config.around(:each, type: :feature) do |example|
    allowed_sites = ->(uri) { uri.host == Capybara.server_host && uri !~ %r{/api/} }
    WebMock.disable_net_connect!(allow: allowed_sites)
    example.run
    WebMock.allow_net_connect!
  end

  config.around(:example, type: :feature, browser: :poltergeist) do |example|
    tmp_driver = Capybara.default_driver
    Capybara.default_driver = :accessible_poltergeist
    example.run
    Capybara.default_driver = tmp_driver
  end
end
